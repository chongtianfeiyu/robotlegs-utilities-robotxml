package com.josyule.utilities.robotxml {		import flash.display.DisplayObjectContainer;		import org.robotlegs.adapters.SwiftSuspendersInjector;	import org.robotlegs.base.ContextEvent;	import org.robotlegs.mvcs.Context;		import com.josyule.utilities.robotxml.views.RobotXMLMediator;	import RobotXML;		public class RobotXMLContext extends Context 	{				//--------------------------------------------------------------------------		//		//  Initialization		//		//--------------------------------------------------------------------------		/**		 * Factory method. Provide the Context with the necessary objects to do its work.		 * Note that the both the injector and reflector are programmed to interfaces		 * so you can freely change the IoC container and Reflection library you want		 * to use as long as the 'contract' is fullfilled. See the adapter package		 * in the RobotLegs source.		 *		 * @param contextView DisplayObjectContainer		 * @param autoStartup Boolean		 *		 */				public function RobotXMLContext(contextView:DisplayObjectContainer = null, autoStartup:Boolean = true) 		{						injector = new SwiftSuspendersInjector(_xmlConfig);			super(contextView, autoStartup);				}				//--------------------------------------------------------------------------		//		//  Overridden API		//		//--------------------------------------------------------------------------		/**		 * Gets called by the framework if autoStartup is true. Here we need to provide		 * the framework with the basic actors. The proxies/services we want to use in		 * the model, map some view components to Mediators and to get things started,		 * add some Sprites to the stage. Only after we drop a Sprite on the stage,		 * RobotLegs will create the Mediator. 		 *		 */		override public function startup():void		{			// Map some Commands to Events			// commandMap.mapEvent(eventType, commandClass, eventClass, isOneShot);			//commandMap.mapEvent(ContextEvent.STARTUP_COMPLETE, PickProjectCommand);									// Dependency injection for models, services and values			// injector.mapSingleton(whenAskedFor:Class, named:String = null);			// injector.mapClass(whenAskedFor:Class, instantiateClass:Class, named:String = null);			// injector.mapValue(whenAskedFor:Class, useValue:Object, named:String = null);			// injector.mapSingletonOf(whenAskedFor:Class, useSingletonOf:Class, named:String = null);						// Bind Mediators to Views			// The mediators are created automatically when the view is added to stage (within contextView)			// mediatormap.mapView(ViewClass, MediatorClass);			// or - if your view is already on stage			// mediatorMap.createMediator(viewObject);						mediatorMap.mapView(RobotXML, RobotXMLMediator);						// and we're done			super.startup();		}						private var _xmlConfig:XML = <types>				<type name="com.josyule.utilities.robotxml.views::RobotXMLMediator">					<field name="view" />				</type>			</types>	}}