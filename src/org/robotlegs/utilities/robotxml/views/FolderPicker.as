package org.robotlegs.utilities.robotxml.views {	import flash.filesystem.File;	import flash.display.Sprite;	import flash.events.*;	import fl.controls.Button;	import fl.controls.Label;		public class FolderPicker extends Sprite 	{		public static const NEW_FOLDER:String = "new_folder";				private static const spacer:int = 10;				private var folderPickerBtn:fl.controls.Button;		private var folderInfo:Label;		private var directory:File;				//--------------------------------------------------------------------------		//		//  Initialization		//		//--------------------------------------------------------------------------		/**		 * Event handling takes place via the mediator: FolderPickerMediator 		 * 		 */				public function FolderPicker() 		{						setup();		}						/**		*	Setup all the required widgets this view uses.		*	Notably, this would be a folder/file chooser (from the AIR Lib), 		*	and some kind of output to show what the current chosen folder is.		*/		protected function setup():void		{						directory = File.documentsDirectory						folderPickerBtn = new fl.controls.Button();			folderPickerBtn.label = "Pick Folder";			addChild(folderPickerBtn);			folderPickerBtn.addEventListener(MouseEvent.CLICK, pickFolderButtonClickedEvent, false, 0, true);			folderPickerBtn.y = spacer;			folderPickerBtn.x = spacer;						folderInfo = new Label();			folderInfo.text = "No Folder Chosen";			folderInfo.width = 200;			addChild(folderInfo);			folderInfo.x = folderPickerBtn.x + folderPickerBtn.width + spacer;			folderInfo.y = folderPickerBtn.y + (folderPickerBtn.height - folderInfo.height)/2;					}				public function getDirectory():String		{			return directory.nativePath;		}				protected function pickFolderButtonClickedEvent(e:MouseEvent):void		{			// popup the folder picker dialog box... Should de-activate all other items... 			// maybe this should be a different view altogether...			//directory.browseForDirectory("Directory to scan");			try			{				directory.browseForDirectory("Directory to scan");				directory.addEventListener(Event.SELECT, directorySelected, false, 0, true);			}			catch (error:Error)			{				trace("Failed:", error.message);			}		}				protected function directorySelected(e:Event):void		{			directory = e.target as File;			folderInfo.text = "Folder: \"" + directory.name + "\"";			// inform the mediator that a folder has been chosen.			dispatchEvent(new Event(NEW_FOLDER));		}			}}