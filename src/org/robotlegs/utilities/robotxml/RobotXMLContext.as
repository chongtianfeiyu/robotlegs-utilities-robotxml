/* * Copyright (c) 2009 the original author or authors *  * Permission is hereby granted to use, modify, and distribute this file  * in accordance with the terms of the license agreement accompanying it. */  package org.robotlegs.utilities.robotxml {		import flash.display.DisplayObjectContainer;	import flash.utils.ByteArray;	import org.robotlegs.adapters.SwiftSuspendersInjector;	import org.robotlegs.base.ContextEvent;	import org.robotlegs.mvcs.Context;		import org.robotlegs.utilities.robotxml.views.*;	import org.robotlegs.utilities.robotxml.models.*;	import org.robotlegs.utilities.robotxml.events.*;	import org.robotlegs.utilities.robotxml.services.*;	import org.robotlegs.utilities.robotxml.commands.*;		import RobotXML;		public class RobotXMLContext extends Context 	{				//--------------------------------------------------------------------------		//		//  Initialization		//		//--------------------------------------------------------------------------		/**		 * Factory method. Provide the Context with the necessary objects to do its work.		 * Note that the both the injector and reflector are programmed to interfaces		 * so you can freely change the IoC container and Reflection library you want		 * to use as long as the 'contract' is fullfilled. See the adapter package		 * in the RobotLegs source.		 *		 * @param contextView DisplayObjectContainer		 * @param autoStartup Boolean		 *		 */				public function RobotXMLContext(contextView:DisplayObjectContainer = null, autoStartup:Boolean = true) 		{			var xmldata:XML = new XML(new _xmlConfig());			injector = new SwiftSuspendersInjector(xmldata);//			injector = new SwiftSuspendersInjector(_xmlConfig);			super(contextView, autoStartup);				}				//--------------------------------------------------------------------------		//		//  Overridden API		//		//--------------------------------------------------------------------------		/**		 * Gets called by the framework if autoStartup is true. Here we need to provide		 * the framework with the basic actors. The proxies/services we want to use in		 * the model, map some view components to Mediators and to get things started,		 * add some Sprites to the stage. Only after we drop a Sprite on the stage,		 * RobotLegs will create the Mediator. 		 *		 */		override public function startup():void		{			// Map some Commands to Events			// commandMap.mapEvent(eventType, commandClass, eventClass, isOneShot);			//commandMap.mapEvent(ContextEvent.STARTUP_COMPLETE, PickProjectCommand);			commandMap.mapEvent(SystemEvent.START_UPDATE, StartParsing);			commandMap.mapEvent(RecurseDirectoryEvent.FILE, ParseFile);			commandMap.mapEvent(RobotLegsParserServiceEvent.NEW_INJECTION, RecordNewInjectionCommand);			commandMap.mapEvent(RobotLegsParserServiceEvent.DONE, WriteXMLCommand);									// Dependency injection for models, services and values			// injector.mapSingleton(whenAskedFor:Class, named:String = null);			// injector.mapClass(whenAskedFor:Class, instantiateClass:Class, named:String = null);			// injector.mapValue(whenAskedFor:Class, useValue:Object, named:String = null);			// injector.mapSingletonOf(whenAskedFor:Class, useSingletonOf:Class, named:String = null);			injector.mapSingleton(Location);			injector.mapSingleton(RecurseDirectoryService);			injector.mapSingleton(RobotLegsParserService);			injector.mapSingleton(Injections);						// Bind Mediators to Views			// The mediators are created automatically when the view is added to stage (within contextView)			// mediatormap.mapView(ViewClass, MediatorClass);			// or - if your view is already on stage			// mediatorMap.createMediator(viewObject);			mediatorMap.mapView(FolderPicker, FolderPickerMediator);			mediatorMap.mapView(FilePicker, FilePickerMediator);			mediatorMap.mapView(UpdateButton, UpdateButtonMediator);						mediatorMap.mapView(RobotXML, RobotXMLMediator);						// and we're done			super.startup();		}				[Embed(source = "injectiondata.xml",mimeType = "application/octet-stream")]    	private var _xmlConfig:Class; 				 //		private var _xmlConfig:XML = <types>//				  <type name="org.robotlegs.utilities.robotxml.commands::ParseFile">//					<field name="service" />//					<field name="event" />//				  </type>//				  <type name="org.robotlegs.utilities.robotxml.commands::RecordNewInjectionCommand">//					<field name="event" />//					<field name="model" />//				  </type>//				  <type name="org.robotlegs.utilities.robotxml.commands::StartParsing">//					<field name="service" />//					<field name="model" />//				  </type>//				  <type name="org.robotlegs.utilities.robotxml.commands::WriteXMLCommand">//					<field name="locations"/>//					<field name="injections"/>//				  </type>//				  <type name="org.robotlegs.utilities.robotxml.views::FilePickerMediator">//					<field name="model"/>//					<field name="view"/>//				  </type>//				  <type name="org.robotlegs.utilities.robotxml.views::FolderPickerMediator">//					<field name="model"/>//					<field name="view"/>//				  </type>//				  <type name="org.robotlegs.utilities.robotxml.views::RobotXMLMediator">//					<field name="view"/>//				  </type>//				  <type name="org.robotlegs.utilities.robotxml.views::UpdateButtonMediator">//					<field name="model"/>//					<field name="view"/>//				  </type>//				</types>	}}