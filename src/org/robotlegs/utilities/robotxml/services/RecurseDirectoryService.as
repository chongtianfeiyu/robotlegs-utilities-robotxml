package org.robotlegs.utilities.robotxml.services {		import org.robotlegs.utilities.robotxml.events.*;		import org.robotlegs.mvcs.Actor;		import flash.filesystem.File;			public class RecurseDirectoryService extends Actor	{						private var _filters:Array;				//--------------------------------------------------------------------------		//		//  Initialization		//		//--------------------------------------------------------------------------		/**		 * No comment. 		 * 		 */		public function RecurseDirectoryService() 		{			_filters = new Array();			super();		}				//--------------------------------------------------------------------------		//		//  API		//		//--------------------------------------------------------------------------				/**		*		*	@param	folder	This is a string to the directory (NativePath) you want to recurse into.		*/		public function start(folder:String):void		{			trace("RecurseDirectoryService.start() " + folder);			getFilesRecursive(folder);			trace("done recursing directories...");		}				/**		*	Can set what extensions you want your files to match.		*			*	<b>Example</b>		*	<code>		*	service.addExtensionFilter("txt");		*	service.addExtensionFilter("as");		*	service.addExtensionFilter("cpp");		*	</code>		*/		public function addExtensionFilter(extension:String):void		{			if(_filters.indexOf(extension) == -1)			{				// not in the list yet, add it				_filters.push(extension);			}		}				public function removeExtensionFilter(extension:String):void		{			var index:Number = _filters.indexOf(extension);			if(index > -1)			{				_filters.splice(index,1);			}		}				/**		*	@param	dir A NativePath string to the directory you want to recurse into.		*/		private function getFilesRecursive(folder:String):void		{			var currentFolder:File = new File(folder);                        //the current folder's file listing            var files:Array = currentFolder.getDirectoryListing();            var file:File;			            //iterate and put files in the result and process the sub folders recursively            for (var f:Number = 0; f < files.length; f++) {								file = files[f] as File;				                if (file.isDirectory) {                    if (file.name !="." && file.name !="..") {                        //it's a directory                        getFilesRecursive(file.nativePath);                    }                } else {                    //it's a file yupeee                   // fileList.push(files[f].nativePath);				   if(_filters.length == 0 || _filters.indexOf(file.extension) > -1)				   {					   dispatch(new RecurseDirectoryEvent(RecurseDirectoryEvent.FILE, file));				   }                }            }            					}			}}